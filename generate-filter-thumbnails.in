#!/usr/bin/env python3
import os
import sys
import inspect
from gi.repository import Gio

import gettext
gettext.install('endless_photos')

BUILDDIR = "@abs_top_builddir@"
SRCDIR = "@abs_top_srcdir@"
ASSET_RESOURCE_PATH = BUILDDIR + '/data/endless_photos.gresource';
THUMBNAIL_IMAGE_PATH = SRCDIR + '/data/images/thumbnail_original.jpg';

sys.path.append(SRCDIR)
from src.photos_model import PhotosModel
from src.resource_prefixes import *

GRESOURCE_HEAD="""
<?xml version="1.0" encoding="UTF-8"?>
<gresources>
    <gresource prefix='""" + THUMBNAILS_RESOURCE_PREFIX + "'>"
GRESOURCE_BODY="""
        <file>{file}</file>"""
GRESOURCE_TAIL="""
    </gresource>
</gresources>"""

def create_dir_if_necessary(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

if __name__ == '__main__':
    asset_resource = Gio.Resource.load(ASSET_RESOURCE_PATH);
    asset_resource._register();
    model = PhotosModel(displayable=False)

    thumbnail_files = []
    output_dir = "data/images/thumbnails"
    create_dir_if_necessary(output_dir)
    model.open(THUMBNAIL_IMAGE_PATH)
    filter_no = 0
    for f in model.get_filter_names():
        model.set_filter(f)
        filename = "filter_" + str(filter_no) + ".jpg"
        model.save(os.path.join(output_dir, filename))
        print(filename)
        thumbnail_files.append(filename)
        filter_no += 1

    model.revert_to_original()
    border_no = 0
    for b in model.get_border_names():
        model.set_border(b)
        filename = "border_" + str(border_no) + ".jpg"
        model.save(os.path.join(output_dir, filename))
        print(filename)
        thumbnail_files.append(filename)
        border_no += 1

    model.revert_to_original()
    distort_no = 0
    for d in model.get_distortion_names():
        model.set_distortion(d)
        filename = "distort_" + str(distort_no) + ".jpg"
        model.save(os.path.join(output_dir, filename))
        print(filename)
        thumbnail_files.append(filename)
        distort_no += 1

    model.revert_to_original()
    distort_no = 0
    for d in model.get_blur_names():
        model.set_blur(d)
        filename = "blur_" + str(distort_no) + ".jpg"
        model.save(os.path.join(output_dir, filename))
        print(filename)
        thumbnail_files.append(filename)
        distort_no += 1

    gresource_file = open("data/images/thumbnails/thumbnails.gresource.xml", "w")
    gresource_file.write(GRESOURCE_HEAD)
    for thumbnail_file in thumbnail_files:
        gresource_file.write(GRESOURCE_BODY.format(file=thumbnail_file))
    gresource_file.write(GRESOURCE_TAIL)
    gresource_file.close()
